version: '3'

dotenv: ['.taskenv', '.secret/.env', '{{.HOME}}/.env' ]
vars:
  LOCAL_BIN: bin
  CONTROLLER_TOOLS_VERSION: v0.14.0
  ENVTEST_K8S_VERSION: "1.29.0"
  ENVTEST_VERSION: release-0.17
  CRD_DIRECTORY: chart/crds
  GO_TEST_COVERAGE_VERSION: v2.10.1
  KIND_VERSION: v0.23.0
  GOLANGCI_LINT_VERSION: v1.59.0
tasks:
  ## Setup
  setup:controller-gen:
    internal: true
    cmds:
      - test -s {{.LOCAL_BIN}}/controller-gen || GOBIN=$(pwd)/{{.LOCAL_BIN}} go install sigs.k8s.io/controller-tools/cmd/controller-gen@{{.CONTROLLER_TOOLS_VERSION}}
  setup:envtest:
    internal: true
    cmds:
      - test -s {{.LOCAL_BIN}}/setup-envtest|| GOBIN=$(pwd)/{{.LOCAL_BIN}} go install sigs.k8s.io/controller-runtime/tools/setup-envtest@{{.ENVTEST_VERSION}}
  setup:golangci-lint:
    internal: true
    cmds:
      - test -s {{.LOCAL_BIN}}/golangci-lint || GOBIN=$(pwd)/{{.LOCAL_BIN}} go install github.com/golangci/golangci-lint/cmd/golangci-lint@{{.GOLANGCI_LINT_VERSION}}
  setup:test-e2e:
    internal: true
    cmds:
      - ( test -s {{.LOCAL_BIN}}/kind || GOBIN=$(pwd)/{{.LOCAL_BIN}} go install sigs.k8s.io/kind@{{.KIND_VERSION}} ) && {{.LOCAL_BIN}}/kind create cluster --name kind

  ## Development
  manifests:
    deps: [setup:controller-gen]
    cmds:
      - "{{.LOCAL_BIN}}/controller-gen rbac:roleName=manager-role crd paths=./... output:crd:artifacts:config={{.CRD_DIRECTORY}}"
  generate:
    cmds:
      - task: manifests
      - "{{.LOCAL_BIN}}/controller-gen object:headerFile=hack/boilerplate.go.txt paths=./..."
  build:
    cmds:
      - go build ./...
  docker-build:
    cmds:
      - docker build .
  ## Testing
  fmt:
    cmds:
      - go fmt ./...
  lint:
    deps: [setup:golangci-lint]
    cmds:
      - task: fmt
      - "{{.LOCAL_BIN}}/golangci-lint run --timeout 15m ./..."
  envtest:
    env:
      KUBEBUILDER_ASSETS:
        sh: $(pwd)/{{.LOCAL_BIN}}/setup-envtest use {{.ENVTEST_K8S_VERSION}} --bin-dir $(pwd)/{{.LOCAL_BIN}} -p path
      GO111MODULE: on
    cmds:
      - go test $(go list ./... | grep -v /e2e) {{.ADDITIONAL_COMMAND_ARGS}} -coverprofile=cover.out
  test:
    deps: [setup:envtest]
    cmds:
      - task: envtest
  # test-e2e:
  #   deps: [setup:envtest, setup:test-e2e]
  #   cmds:
  #     - go test ./test/e2e/... -coverprofile cover.out
  cover:
    deps: [test]
    cmds:
      - test -s cover.out || touch cover.out
      - go tool cover -func=cover.out
  helm-unittest:
    cmds:
      - helm unittest chart
  validate:
    cmds:
      - task: lint
      - task: test
  install:
    cmds:
      - kubectl apply -f config/crd/bases
  uninstall:
    cmds:
      - kubectl delete --ignore-not-found=true -f config/crd/bases
