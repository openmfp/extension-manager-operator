// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	multierror "github.com/hashicorp/go-multierror"
	mock "github.com/stretchr/testify/mock"
)

// ExtensionConfiguration is an autogenerated mock type for the ExtensionConfiguration type
type ExtensionConfiguration struct {
	mock.Mock
}

type ExtensionConfiguration_Expecter struct {
	mock *mock.Mock
}

func (_m *ExtensionConfiguration) EXPECT() *ExtensionConfiguration_Expecter {
	return &ExtensionConfiguration_Expecter{mock: &_m.Mock}
}

// Validate provides a mock function with given fields: _a0, _a1
func (_m *ExtensionConfiguration) Validate(_a0 []byte, _a1 string) (string, error, *multierror.Error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Validate")
	}

	var r0 string
	var r1 error
	var r2 *multierror.Error
	if rf, ok := ret.Get(0).(func([]byte, string) (string, error, *multierror.Error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func([]byte, string) string); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func([]byte, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	if rf, ok := ret.Get(2).(func([]byte, string) *multierror.Error); ok {
		r2 = rf(_a0, _a1)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).(*multierror.Error)
		}
	}

	return r0, r1, r2
}

// ExtensionConfiguration_Validate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Validate'
type ExtensionConfiguration_Validate_Call struct {
	*mock.Call
}

// Validate is a helper method to define mock.On call
//   - _a0 []byte
//   - _a1 string
func (_e *ExtensionConfiguration_Expecter) Validate(_a0 interface{}, _a1 interface{}) *ExtensionConfiguration_Validate_Call {
	return &ExtensionConfiguration_Validate_Call{Call: _e.mock.On("Validate", _a0, _a1)}
}

func (_c *ExtensionConfiguration_Validate_Call) Run(run func(_a0 []byte, _a1 string)) *ExtensionConfiguration_Validate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte), args[1].(string))
	})
	return _c
}

func (_c *ExtensionConfiguration_Validate_Call) Return(_a0 string, _a1 error, _a2 *multierror.Error) *ExtensionConfiguration_Validate_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ExtensionConfiguration_Validate_Call) RunAndReturn(run func([]byte, string) (string, error, *multierror.Error)) *ExtensionConfiguration_Validate_Call {
	_c.Call.Return(run)
	return _c
}

// WithSchema provides a mock function with given fields: _a0
func (_m *ExtensionConfiguration) WithSchema(_a0 []byte) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for WithSchema")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExtensionConfiguration_WithSchema_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithSchema'
type ExtensionConfiguration_WithSchema_Call struct {
	*mock.Call
}

// WithSchema is a helper method to define mock.On call
//   - _a0 []byte
func (_e *ExtensionConfiguration_Expecter) WithSchema(_a0 interface{}) *ExtensionConfiguration_WithSchema_Call {
	return &ExtensionConfiguration_WithSchema_Call{Call: _e.mock.On("WithSchema", _a0)}
}

func (_c *ExtensionConfiguration_WithSchema_Call) Run(run func(_a0 []byte)) *ExtensionConfiguration_WithSchema_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *ExtensionConfiguration_WithSchema_Call) Return(_a0 error) *ExtensionConfiguration_WithSchema_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExtensionConfiguration_WithSchema_Call) RunAndReturn(run func([]byte) error) *ExtensionConfiguration_WithSchema_Call {
	_c.Call.Return(run)
	return _c
}

// NewExtensionConfiguration creates a new instance of ExtensionConfiguration. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewExtensionConfiguration(t interface {
	mock.TestingT
	Cleanup(func())
}) *ExtensionConfiguration {
	mock := &ExtensionConfiguration{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
